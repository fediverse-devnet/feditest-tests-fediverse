#
# This Makefile runs certain test plans
#
# This attempt to run executable `feditest` in your $PATH. If you'd like
# to run a different executable, such as one in a virtual environment,
# invoke this Makefile with extra parameter FEDITEST=path/to/my/feditest
#

FEDITEST=feditest
Q=
# Could set from the command-line to something like: 'Q=.$(shell git branch --show-current)'

EX=examples$(Q)
PROD=production$(Q)


EXAMPLES_TESTPLANS= \
  webfinger-server-gargron-mastodon-social-saas-imp \
  webfinger-server-ubos-mastodon-imp \
  webfinger-server-ubos-mastodon-wordpress-imp \
  webfinger-server-ubos-wordpress-imp

PRODUCTION_TESTPLANS= \
  webfinger-server-all-wellknown-saas-imp \

default :
	@echo "Choose a target, such as '$(EX)' or '$(PROD)'."

all : \
  $(EX) \
  $(PROD)

$(EX) : \
  $(EX)-transcripts \
  $(EX)-transcripts-tap \
  $(EX)-transcripts-html

$(EX)-transcripts : \
  $(patsubst %, $(EX)/testresults/%.json, $(EXAMPLES_TESTPLANS))

$(EX)-transcripts-tap : \
  $(patsubst %, $(EX)/testresults/%.tap, $(EXAMPLES_TESTPLANS))

$(EX)-transcripts-html : \
  $(patsubst %, $(EX)/testresults/%.sequential.html, $(EXAMPLES_TESTPLANS)) \
  $(patsubst %, $(EX)/testresults/%.testmatrix.html, $(EXAMPLES_TESTPLANS))

$(PROD) : \
  $(PROD)-transcripts \
  $(PROD)-transcripts-tap \
  $(PROD)-transcripts-html

$(PROD)-transcripts : \
  $(patsubst %, $(PROD)/testresults/%.json, $(PRODUCTION_TESTPLANS))

$(PROD)-transcripts-tap : \
  $(patsubst %, $(PROD)/testresults/%.tap, $(PRODUCTION_TESTPLANS))

$(PROD)-transcripts-html : \
  $(patsubst %, $(PROD)/testresults/%.sequential.html, $(PRODUCTION_TESTPLANS)) \
  $(patsubst %, $(PROD)/testresults/%.testmatrix.html, $(PRODUCTION_TESTPLANS))


########## General rules to make things simpler ##########

# Given a testplan in $(EX)/testplans, run it and generate a testrun JSON transcript in $(EX)/testresults with the same name
$(EX)/testresults/%.json : $(EX)/testplans/%.json $(EX)/testresults/.touch
	$(FEDITEST) run \
		--testplan $< \
		--json $@ \
	|| echo 'ERRORS in the test run (as expected), so we continue'

# Given a testplan in $(PROD)/testplans, run it and generate a testrun JSON transcript in $(PROD)/testresults with the same name
$(PROD)/testresults/%.json : $(PROD)/testplans/%.json $(PROD)/testresults
	$(FEDITEST) run \
		--testplan $< \
		--json $@ \
	|| echo 'ERRORS in the test run (as expected), so we continue'

# Given a testrun JSON transcript, convert it to TAP format
%.tap : %.json
	$(FEDITEST) convert-transcript \
		--in $< \
		--tap $@

# Given a testrun JSON transcript, convert it to HTML format with a template that lists everything that happened in sequential order
%.sequential.html : %.json
	$(FEDITEST) convert-transcript \
		--in $< \
		--html $@ \
		--template testrun-report-sequential-standalone

# Given a testrun JSON transcript, convert it to HTML format with a template that creates a test matrix
%.testmatrix.html : %.json
	$(FEDITEST) convert-transcript \
		--in $< \
		--html $@ \
		--template testrun-report-testmatrix-standalone

########## and the rest ##########

$(EX)/testresults/.touch :
	[[ -d $(EX)/testresults ]] || mkdir -p $(EX)/testresults
	touch $@

clean :
	rm {$(EX),$(PROD)}/testresults/*.{json,tap,html} >/dev/null 2>&1 || true

.PHONY : \
  default all clean \
  $(EX) $(EX)-transcript $(EX)-transcripts-tap $(EX)-transcripts-html \
  $(PROD) $(PROD)-transcript $(PROD)-transcripts-tap $(PROD)-transcripts-html

